{"version":3,"sources":["components/form/Form.js","components/buttons/Button.js","components/messages/Message.js","components/userList/User.js","utils/queries.js","utils/queryParameters.js","components/userList/UserList.js","components/form/validateInput.js","App.js","reportWebVitals.js","index.js"],"names":["Form","inputValues","handleFormInput","handleSubmit","className","name","onChange","value","query_type","placeholder","type","query_value","onClick","Button","buttonText","handleClick","classBtn","Message","customClass","children","noDataText","User","users","usersData","search","edges","useState","userID","setUserID","length","map","node","src","avatarUrl","alt","login","email","indexOf","id","bio","filter","el","GET_USERS","gql","queryParameters","query","variables","first","UserList","displayError","setDisplayError","setInputValues","useLazyQuery","getUsers","loading","error","data","style","textAlign","console","log","event","target","e","preventDefault","callback","minCharacters","validEmail","correct","match","validateInput","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","request","operation","a","setContext","headers","authorization","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c6f8e15.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./form.css\";\r\n\r\nconst Form = ({ inputValues, handleFormInput, handleSubmit }) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <form>\r\n        <select\r\n          name=\"query_type\"\r\n          onChange={handleFormInput}\r\n          value={inputValues.query_type}\r\n        >\r\n          <option value=\"Login\">Login</option>\r\n          <option value=\"Name\">Name</option>\r\n          <option value=\"E-mail\">E-mail</option>\r\n        </select>\r\n        <input\r\n          placeholder=\"Write name\"\r\n          name=\"query_value\"\r\n          type=\"text\"\r\n          value={inputValues.query_value}\r\n          onChange={handleFormInput}\r\n        />\r\n        <button\r\n          className=\"btn btn--primary\"\r\n          type=\"submit\"\r\n          onClick={handleSubmit}\r\n        >\r\n          Click\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./button.css\";\r\n\r\nconst Button = ({ buttonText, handleClick, classBtn }) => {\r\n  return (\r\n    <div className={`btn btn--${classBtn}`} onClick={() => handleClick()}>\r\n      {buttonText}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./message.css\";\r\n\r\nconst Message = ({ customClass, children }) => {\r\n  return <div className={`bar bar--${customClass}`}>{children}</div>;\r\n};\r\n\r\nexport default Message;\r\n","import React, { useState } from \"react\";\r\nimport Button from \"../buttons/Button\";\r\nimport Message from \"../messages/Message\";\r\nimport \"./users.css\";\r\n\r\nconst User = ({ usersData }) => {\r\n  const users = usersData.search.edges;\r\n  const [userID, setUserID] = useState([]);\r\n\r\n  const toggleUserDescription = (id) => {\r\n    if (userID.indexOf(id) !== -1) {\r\n      setUserID(userID.filter((el) => el !== id));\r\n    } else {\r\n      setUserID((userID) => [...userID, id]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        {users.length > 0 ? (\r\n          users.map(({ node }) => (\r\n            <div className=\"user\" key={node.id}>\r\n              <img src={node.avatarUrl} alt={node.login} />\r\n              <div className=\"user__text\">\r\n                <p>{node.name || noDataText}</p>\r\n                <p>Login: {node.login || noDataText}</p>\r\n                <p>Email: {node.email || noDataText}</p>\r\n                {userID.indexOf(node.id) !== -1 && (\r\n                  <p>Bio: {node.bio || noDataText}</p>\r\n                )}\r\n              </div>\r\n              <Button\r\n                classBtn={\"secondary\"}\r\n                handleClick={() => toggleUserDescription(node.id)}\r\n                buttonText={\r\n                  userID.indexOf(node.id) !== -1 ? \"Hide\" : \"Show more\"\r\n                }\r\n              />\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <Message customClass={\"info\"}>\r\n            <p>Nothing has been found !</p>\r\n          </Message>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst noDataText = \"Brak danych\";\r\n\r\nexport default User;\r\n","import gql from \"graphql-tag\";\r\n\r\nexport const GET_USERS = gql`\r\n  query SearchUsers($query: String!, $first: Int!) {\r\n    search(query: $query, type: USER, first: $first) {\r\n      edges {\r\n        node {\r\n          ... on User {\r\n            id\r\n            login\r\n            email\r\n            name\r\n            bio\r\n            websiteUrl\r\n            avatarUrl\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","const queryParameters = (query) => ({\r\n  variables: {\r\n    query: query,\r\n    first: 4,\r\n  },\r\n});\r\n\r\nexport default queryParameters;\r\n","import React, { useState } from \"react\";\r\nimport { useLazyQuery } from \"react-apollo\";\r\n// import Loader from \"react-loader-spinner\";\r\nimport Form from \"../form/Form.js\";\r\nimport User from \"./User\";\r\nimport Message from \"../messages/Message\";\r\nimport { GET_USERS } from \"../../utils/queries.js\";\r\nimport queryParameters from \"../../utils/queryParameters\";\r\nimport { validateInput } from \"../form/validateInput\";\r\n\r\nconst UserList = () => {\r\n  const [displayError, setDisplayError] = useState(false);\r\n  const [inputValues, setInputValues] = useState({\r\n    query_value: \"\",\r\n    query_type: \"Login\",\r\n  });\r\n\r\n  const handleFormInput = (event) => {\r\n    const { name, value } = event.target;\r\n    setInputValues({ ...inputValues, [name]: value });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { query_value, query_type } = inputValues;\r\n    let validated = validateInput(query_value, query_type, setDisplayError);\r\n    if (validated) {\r\n      getUsers(queryParameters(query_value));\r\n      // setInputValues({\r\n      //   query_value: \"\",\r\n      //   query_type: \"Login\",\r\n      // });\r\n    }\r\n  };\r\n\r\n  const [getUsers, { loading, error, data }] = useLazyQuery(GET_USERS);\r\n\r\n  if (loading)\r\n    return (\r\n      // <Loader\r\n      //   style={{ width: \"100%\", textAlign: \"center\" }}\r\n      //   type=\"Bars\"\r\n      //   color=\"#00BFFF\"\r\n      //   height={80}\r\n      //   width={80}\r\n      // />\r\n      <p style={{ textAlign: \"center\" }}>..loading</p>\r\n    );\r\n  if (error) {\r\n    console.log(`Error! ${error}`);\r\n    return (\r\n      <Message customClass={\"info\"}>\r\n        <p>\r\n          Upps, something went wrong, please check your internet connection and\r\n          try again\r\n        </p>\r\n      </Message>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <p>\r\n      <Form\r\n        inputValues={inputValues}\r\n        handleFormInput={handleFormInput}\r\n        handleSubmit={handleSubmit}\r\n      />\r\n\r\n      {displayError && (\r\n        <Message customClass={\"warning\"}>\r\n          <p>{displayError}</p>\r\n        </Message>\r\n      )}\r\n\r\n      {data && <User usersData={data} />}\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n","export const validateInput = (value, type, callback) => {\r\n  callback(false);\r\n\r\n  let minCharacters = true,\r\n    validEmail = true,\r\n    correct = false;\r\n\r\n  if (type === \"E-mail\") {\r\n    if (!value.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/)) {\r\n      validEmail = false;\r\n      callback(\"Email is incorrect\");\r\n    }\r\n  }\r\n\r\n  if (value.length < 3) {\r\n    minCharacters = false;\r\n    callback(\"Mimimum 3 characters required\");\r\n  }\r\n\r\n  if (minCharacters && validEmail) {\r\n    correct = true;\r\n  }\r\n\r\n  console.log(minCharacters + \" \" + validEmail);\r\n  return correct;\r\n};\r\n","import React from \"react\";\r\nimport UserList from \"./components/userList/UserList\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 style={{ textAlign: \"center\" }}>Github User Search</h1>\r\n      <UserList />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// nowe\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n\nconst client = new ApolloClient({\n  uri: \"https://api.github.com/graphql\",\n  request: async (operation) => {\n    operation.setContext({\n      headers: {\n        authorization: `token ${process.env.REACT_APP_GITHUB_KEY}`,\n      },\n    });\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}